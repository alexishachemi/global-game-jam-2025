[gd_scene load_steps=15 format=3 uid="uid://c8y4v2su6k8x"]

[ext_resource type="Script" path="res://Scripts/intro_path.gd" id="1_vd87n"]
[ext_resource type="Script" path="res://Scripts/sub_follow_path.gd" id="2_xaa3l"]
[ext_resource type="Texture2D" uid="uid://5q3k1pno1fn1" path="res://Assets/submarine_resized.png" id="3_wuh46"]
[ext_resource type="PackedScene" uid="uid://q87urgp564bc" path="res://Scenes/underwater_shader.tscn" id="4_b3u4x"]
[ext_resource type="AudioStream" uid="uid://bdqkr3oksg34w" path="res://Assets/BOOBS_Intro.mp3" id="5_shqi7"]
[ext_resource type="AudioStream" uid="uid://bkf6sdhp42pqh" path="res://Assets/Explosion_Intro.mp3" id="6_il76f"]
[ext_resource type="AudioStream" uid="uid://c5qncgn5dcglw" path="res://Assets/Homesong.mp3" id="7_d15fj"]
[ext_resource type="Script" path="res://Scripts/particle_projection.gd" id="8_pmhtb"]
[ext_resource type="Texture2D" uid="uid://ry5d1gxv0qin" path="res://Assets/pixel.png" id="9_5llgf"]
[ext_resource type="Texture2D" uid="uid://274e54p74fel" path="res://Assets/boobshome.png" id="10_qdqkl"]

[sub_resource type="Curve3D" id="Curve3D_40dw0"]
_data = {
"points": PackedVector3Array(0.185791, -0.0512695, 0.187073, 0, 0, 0, 1000, 2150, 1000, 18.093, 5.668, 18.093, -18.093, -5.668, -18.093, 980, 2145, 980, 428.184, 375.576, 428.184, -428.184, -375.576, -428.184, 500, 1700, 500, 0, 90, 0, 0, -90, 0, 0, 900, 0, 0, 90, 0, 0, 0, 0, 0, 300, 0),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0)
}
point_count = 5

[sub_resource type="Curve3D" id="Curve3D_88ssn"]
_data = {
"points": PackedVector3Array(-0.595123, -0.215088, -0.426392, 0.595123, 0.215088, 0.426392, -0.666718, 0.505371, -0.386963, -0.24231, 0.764893, -0.732666, 0.24231, -0.764893, 0.732666, 0.0320129, 0.0390625, -1.01074, -0.595123, -0.215088, -0.426392, 0.595123, 0.215088, 0.426392, -0.666412, 0.505127, -0.389404),
"tilts": PackedFloat32Array(0, 0, 0)
}
point_count = 3

[sub_resource type="Shader" id="Shader_6ybum"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ParticleProcessMaterial.

shader_type particles;
render_mode disable_velocity;

uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float inherit_emitter_velocity_ratio = 0.0;
uniform float initial_linear_velocity_min;
uniform float initial_linear_velocity_max;
uniform float directional_velocity_min;
uniform float directional_velocity_max;
uniform float angular_velocity_min;
uniform float angular_velocity_max;
uniform float orbit_velocity_min;
uniform float orbit_velocity_max;
uniform float radial_velocity_min;
uniform float radial_velocity_max;
uniform float linear_accel_min;
uniform float linear_accel_max;
uniform float radial_accel_min;
uniform float radial_accel_max;
uniform float tangent_accel_min;
uniform float tangent_accel_max;
uniform float damping_min;
uniform float damping_max;
uniform float initial_angle_min;
uniform float initial_angle_max;
uniform float scale_min;
uniform float scale_max;
uniform float hue_variation_min;
uniform float hue_variation_max;
uniform float anim_speed_min;
uniform float anim_speed_max;
uniform float anim_offset_min;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec3 emission_shape_offset = vec3(0.0);
uniform vec3 emission_shape_scale = vec3(1.0);
uniform vec3 velocity_pivot = vec3(0.0);
uniform vec3 emission_box_extents;
uniform vec4 color_value : source_color;
uniform vec3 gravity;
uniform sampler2D sprite;

vec4 rotate_hue(vec4 current_color, float hue_rot_angle) {
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat =
			mat4(vec4(0.299, 0.587, 0.114, 0.0),
					vec4(0.299, 0.587, 0.114, 0.0),
					vec4(0.299, 0.587, 0.114, 0.0),
					vec4(0.000, 0.000, 0.000, 1.0)) +
			mat4(vec4(0.701, -0.587, -0.114, 0.0),
					vec4(-0.299, 0.413, -0.114, 0.0),
					vec4(-0.300, -0.588, 0.886, 0.0),
					vec4(0.000, 0.000, 0.000, 0.0)) *
					hue_rot_c +
			mat4(vec4(0.168, 0.330, -0.497, 0.0),
					vec4(-0.328, 0.035, 0.292, 0.0),
					vec4(1.250, -1.050, -0.203, 0.0),
					vec4(0.000, 0.000, 0.000, 0.0)) *
					hue_rot_s;
	return hue_rot_mat * current_color;
}

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0) {
		s = 305420679;
	}
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0) {
		s += 2147483647;
	}
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

struct DisplayParameters {
	vec3 scale;
	float hue_rotation;
	float animation_speed;
	float animation_offset;
	float lifetime;
	vec4 color;
};

struct DynamicsParameters {
	float angle;
	float angular_velocity;
	float initial_velocity_multiplier;
	float directional_velocity;
	float radial_velocity;
	float orbit_velocity;
};

struct PhysicalParameters {
	float linear_accel;
	float radial_accel;
	float tangent_accel;
	float damping;
};

void calculate_initial_physical_params(inout PhysicalParameters params, inout uint alt_seed) {
	params.linear_accel = mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed));
	params.radial_accel = mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed));
	params.tangent_accel = mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	params.damping = mix(damping_min, damping_max, rand_from_seed(alt_seed));
}

void calculate_initial_dynamics_params(inout DynamicsParameters params, inout uint alt_seed) {
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	params.angle = mix(initial_angle_min, initial_angle_max, rand_from_seed(alt_seed));
	params.angular_velocity = mix(angular_velocity_min, angular_velocity_max, rand_from_seed(alt_seed));
	params.initial_velocity_multiplier = mix(initial_linear_velocity_min, initial_linear_velocity_max, rand_from_seed(alt_seed));
	params.directional_velocity = mix(directional_velocity_min, directional_velocity_max, rand_from_seed(alt_seed));
	params.radial_velocity = mix(radial_velocity_min, radial_velocity_max, rand_from_seed(alt_seed));
	params.orbit_velocity = mix(orbit_velocity_min, orbit_velocity_max, rand_from_seed(alt_seed));
}

void calculate_initial_display_params(inout DisplayParameters params, inout uint alt_seed) {
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	float pi = 3.14159;
	params.scale = vec3(mix(scale_min, scale_max, rand_from_seed(alt_seed)));
	params.scale = sign(params.scale) * max(abs(params.scale), 0.001);
	params.hue_rotation = pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	params.animation_speed = mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	params.animation_offset = mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed));
	params.lifetime = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	params.color = color_value;
}

void process_display_param(inout DisplayParameters parameters, float lifetime) {
	// Compile-time add textures.

	//parameters.color = rotate_hue(parameters.color, parameters.hue_rotation);
}

vec3 calculate_initial_position(inout uint alt_seed) {
	float pi = 3.14159;
	vec3 pos = vec3(0.0);
	{ // Emission shape.
		pos = vec3(rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0) * emission_box_extents;
	}
	return pos * emission_shape_scale + emission_shape_offset;
}

vec3 process_orbit_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta, float total_lifetime) {
	if (abs(param.orbit_velocity) < 0.01 || delta < 0.001) {
		return vec3(0.0);
	}
	vec3 displacement = vec3(0.0);
	float pi = 3.14159;
	float orbit_amount = param.orbit_velocity;
	if (orbit_amount != 0.0) {
		vec3 pos = transform[3].xyz;
		vec3 org = emission_transform[3].xyz;
		vec3 diff = pos - org;
		float ang = orbit_amount * pi * 2.0 * delta;
		mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		displacement.xy -= diff.xy;
		displacement.xy += rot * diff.xy;
	}
	return (emission_transform * vec4(displacement / delta, 0.0)).xyz;
}

vec3 get_random_direction_from_spread(inout uint alt_seed, float spread_angle) {
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	float spread_rad = spread_angle * degree_to_rad;
	float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
	angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
	vec3 spread_direction = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
	return spread_direction;
}

vec3 process_radial_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta) {
	vec3 radial_displacement = vec3(0.0);
	if (delta < 0.001) {
		return radial_displacement;
	}
	float radial_displacement_multiplier = 1.0;
	vec3 global_pivot = (emission_transform * vec4(velocity_pivot, 1.0)).xyz;
	if (length(transform[3].xyz - global_pivot) > 0.01) {
		radial_displacement = normalize(transform[3].xyz - global_pivot) * radial_displacement_multiplier * param.radial_velocity;
	} else {
		radial_displacement = get_random_direction_from_spread(alt_seed, 360.0) * param.radial_velocity;
	}
	if (radial_displacement_multiplier * param.radial_velocity < 0.0) {
		// Prevent inwards velocity to flicker once the point is reached.
		radial_displacement = normalize(radial_displacement) * min(abs(radial_displacement_multiplier * param.radial_velocity), length(transform[3].xyz - global_pivot) / delta);
	}
	return radial_displacement;
}

void process_physical_parameters(inout PhysicalParameters params, float lifetime_percent) {
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	// Reset alt seed?
	//alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);

	//process_display_param(params, 0.0);
	if (rand_from_seed(alt_seed) > AMOUNT_RATIO) {
		ACTIVE = false;
	}

	if (RESTART_CUSTOM) {
		CUSTOM = vec4(0.0);
		CUSTOM.w = params.lifetime;
		CUSTOM.x = dynamic_params.angle;
	}
	//if (RESTART_COLOR) {
		//COLOR = params.color;
	//}
	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}
	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = calculate_initial_position(alt_seed);
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	}
	if (RESTART_VELOCITY) {
		VELOCITY = get_random_direction_from_spread(alt_seed, spread) * dynamic_params.initial_velocity_multiplier;
	}

	//process_display_param(params, 0.0);

	VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	VELOCITY += EMITTER_VELOCITY * inherit_emitter_velocity_ratio;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	
	vec2 textureS = vec2(textureSize(sprite, 0));
	vec2 uv = (TRANSFORM[3].xy / textureS) + vec2(0.5);
	COLOR = texture(sprite, uv);
	VELOCITY.xy =(TRANSFORM[3].xy) * initial_linear_velocity_min;
	if (COLOR.a == 0.0)
	{
		ACTIVE = false;
	}
}

void process() {
	uint base_number = NUMBER;
	//if (repeatable) {
	//	base_number = INDEX;
	//}
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);

	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	CUSTOM.y = mix(CUSTOM.y, 1.0, INTERPOLATE_TO_END);
	float lifetime_percent = CUSTOM.y / params.lifetime;
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}

	// Calculate all velocity.
	vec3 controlled_displacement = vec3(0.0);
	controlled_displacement += process_orbit_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA, params.lifetime * LIFETIME);
	controlled_displacement += process_radial_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);

	process_physical_parameters(physics_params, lifetime_percent);
	vec3 force;
	{
		// Copied from previous version.
		vec3 pos = TRANSFORM[3].xyz;
		force = gravity;
		// Apply linear acceleration.
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * physics_params.linear_accel : vec3(0.0);
		// Apply radial acceleration.
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * physics_params.radial_accel : vec3(0.0);
		// Apply tangential acceleration.
		float tangent_accel_val = physics_params.tangent_accel;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
		force += ATTRACTOR_FORCE;
		force.z = 0.0;
		// Apply attractor forces.
		VELOCITY += force * DELTA;
	}
	{
		// Copied from previous version.
		if (physics_params.damping > 0.0) {
			float v = length(VELOCITY);
			v -= physics_params.damping * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
	}

	// Turbulence before limiting.
	vec3 final_velocity = controlled_displacement + VELOCITY;

	final_velocity.z = 0.0;

	TRANSFORM[3].xyz += final_velocity * DELTA;

	process_display_param(params, lifetime_percent);

	float base_angle = dynamic_params.angle;
	base_angle += CUSTOM.y * LIFETIME * dynamic_params.angular_velocity;
	CUSTOM.x = base_angle * degree_to_rad;
	//COLOR = params.color;
	//vec2 textureS = vec2(textureSize(sprite, 0));
	//vec2 uv = (TRANSFORM[3].xy / (2.0 * textureS)) + vec2(0.5);
	//uv = clamp(uv, 0.0, 1.0);
	//COLOR = texture(sprite, uv);

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;

	TRANSFORM[0].xyz *= sign(params.scale.x) * max(abs(params.scale.x), 0.001);
	TRANSFORM[1].xyz *= sign(params.scale.y) * max(abs(params.scale.y), 0.001);
	TRANSFORM[2].xyz *= sign(params.scale.z) * max(abs(params.scale.z), 0.001);

	CUSTOM.z = params.animation_offset + lifetime_percent * params.animation_speed;

	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	if (COLOR.a > 0.0)
	{
		COLOR.a -= 1.0 / LIFETIME * DELTA;
	}
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dce6r"]
shader = SubResource("Shader_6ybum")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 0.0
shader_parameter/flatness = 0.0
shader_parameter/inherit_emitter_velocity_ratio = 0.0
shader_parameter/initial_linear_velocity_min = 1.0
shader_parameter/initial_linear_velocity_max = 1.0
shader_parameter/directional_velocity_min = 1.0
shader_parameter/directional_velocity_max = 1.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/radial_velocity_min = null
shader_parameter/radial_velocity_max = null
shader_parameter/linear_accel_min = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/scale_min = 1.0
shader_parameter/scale_max = 1.0
shader_parameter/hue_variation_min = 0.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_shape_offset = Vector3(0, 0, 0)
shader_parameter/emission_shape_scale = Vector3(1, 1, 1)
shader_parameter/velocity_pivot = Vector3(0, 0, 0)
shader_parameter/emission_box_extents = Vector3(33, 23.5, 1)
shader_parameter/color_value = Color(1, 1, 1, 1)
shader_parameter/gravity = Vector3(0, -1e-06, 0)
shader_parameter/sprite = ExtResource("3_wuh46")

[node name="IntroMenu" type="Node3D"]

[node name="Path3D" type="Path3D" parent="."]
transform = Transform3D(0.707107, 0, -0.707107, 0, 1, 0, 0.707107, 0, 0.707107, 0, 0, 0)
curve = SubResource("Curve3D_40dw0")

[node name="PathFollow3D" type="PathFollow3D" parent="Path3D" node_paths=PackedStringArray("explosion_particules", "submarine_sprite", "submarine_pathfollow", "watershader", "homesprite")]
transform = Transform3D(0.707105, -0.0249356, 0.706664, 2.79396e-09, 0.999371, 0.0352644, -0.707105, -0.0249356, 0.706665, 999.93, 2150.01, 999.93)
progress = 0.1
cubic_interp = false
loop = false
script = ExtResource("1_vd87n")
explosion_particules = NodePath("../../Node2D/GPUParticles2D")
submarine_sprite = NodePath("Camera3D/Path3D/PathFollow3D/Sprite3D")
submarine_pathfollow = NodePath("Camera3D/Path3D/PathFollow3D")
watershader = NodePath("Camera3D/Camera2D/UnderwaterShader")
homesprite = NodePath("../../Node2D/Sprite2D")

[node name="Camera3D" type="Camera3D" parent="Path3D/PathFollow3D"]

[node name="Path3D" type="Path3D" parent="Path3D/PathFollow3D/Camera3D"]
transform = Transform3D(1, 1.86265e-09, 0, 0, 1, 3.72529e-09, 0, -1.86265e-09, 1, -0.0112305, -0.499756, -1.31702)
curve = SubResource("Curve3D_88ssn")

[node name="PathFollow3D" type="PathFollow3D" parent="Path3D/PathFollow3D/Camera3D/Path3D"]
transform = Transform3D(0.999946, 0, 0, 0, 0.999953, 0, 0, 0, 0.999965, -0.666718, 0.505371, -0.386963)
rotation_mode = 0
script = ExtResource("2_xaa3l")

[node name="Sprite3D" type="Sprite3D" parent="Path3D/PathFollow3D/Camera3D/Path3D/PathFollow3D"]
transform = Transform3D(0.949285, 0.137314, 0.282846, -0.224226, 0.926282, 0.302861, -0.220408, -0.350923, 0.910095, 0, 0, 0)
texture_filter = 0
texture = ExtResource("3_wuh46")

[node name="Camera2D" type="Camera2D" parent="Path3D/PathFollow3D/Camera3D"]

[node name="UnderwaterShader" parent="Path3D/PathFollow3D/Camera3D/Camera2D" instance=ExtResource("4_b3u4x")]
position = Vector2(0.00012207, 0)

[node name="MusicIntroPlayer" type="AudioStreamPlayer" parent="Path3D/PathFollow3D"]
stream = ExtResource("5_shqi7")

[node name="BoomPlayer" type="AudioStreamPlayer" parent="Path3D/PathFollow3D"]
stream = ExtResource("6_il76f")

[node name="HomeSongPlayer" type="AudioStreamPlayer" parent="Path3D/PathFollow3D"]
stream = ExtResource("7_d15fj")
volume_db = -8.113
parameters/looping = true

[node name="Node2D" type="Node2D" parent="."]
script = ExtResource("8_pmhtb")
sprite_3d = NodePath("../Path3D/PathFollow3D/Camera3D/Path3D/PathFollow3D/Sprite3D")

[node name="GPUParticles2D" type="GPUParticles2D" parent="Node2D"]
emitting = false
amount = 8000
process_material = SubResource("ShaderMaterial_dce6r")
texture = ExtResource("9_5llgf")
lifetime = 2.0
one_shot = true
explosiveness = 1.0
local_coords = true

[node name="Sprite2D" type="Sprite2D" parent="Node2D"]
position = Vector2(98, -344)
texture = ExtResource("10_qdqkl")
